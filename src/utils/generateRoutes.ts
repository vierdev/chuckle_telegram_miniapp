// generateRoutes.ts
import fs from "node:fs";
import path from "node:path";
import { performance } from "node:perf_hooks";

const pagesDir = path.resolve(__dirname, "../pages");
const outputFilePath = path.resolve(__dirname, "../autoGeneratedRoutes.tsx");

const getRoutePath = (filePath: string): string => {
  let relativePath = path.relative(pagesDir, filePath).replace(/\\/g, "/");
  relativePath = relativePath.replace(/\.(jsx|tsx)$/, "");

  if (relativePath === "index") return "/";
  if (relativePath.endsWith("/index")) {
    relativePath = relativePath.replace(/\/index$/, "");
  }

  relativePath = relativePath.replace(/\[([^\]]+)\]/g, ":$1");

  return `/${relativePath}`;
};

const getComponentName = (filePath: string): string => {
  const relativePath = path.relative(pagesDir, filePath).replace(/\\/g, "/");
  const nameParts = relativePath
    .replace(/\.(jsx|tsx)$/, "")
    .split("/")
    .map((part) => {
      if (part.startsWith("[") && part.endsWith("]")) {
        return part.slice(1, -1).replace(/[^a-zA-Z0-9]/g, "");
      }
      return part.charAt(0).toUpperCase() + part.slice(1);
    });
  return nameParts.join("");
};

interface Route {
  path: string;
  componentName: string;
  loader: string;
}

const walkDir = (dir: string, imports: Set<string>): Route[] => {
  const files = fs.readdirSync(dir);
  let routes: Route[] = [];

  for (const file of files) {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      routes = routes.concat(walkDir(filePath, imports));
    } else if (
      /\.(jsx|tsx)$/.test(file) &&
      file !== "loading.jsx" &&
      file !== "error.jsx"
    ) {
      const routePath = getRoutePath(filePath);
      const componentName = getComponentName(filePath);
      const importPath = `./pages/${path
        .relative(pagesDir, filePath)
        .replace(/\\/g, "/")}`;

      const loadingFilePathJsx = path.join(
        path.dirname(filePath),
        "loading.jsx"
      );
      const loadingFilePathTsx = path.join(
        path.dirname(filePath),
        "loading.tsx"
      );
      const loadingFilePath = fs.existsSync(loadingFilePathTsx)
        ? loadingFilePathTsx
        : loadingFilePathJsx;

      imports.add(
        `const ${componentName} = React.lazy(() => import('${importPath}'));`
      );

      if (fs.existsSync(loadingFilePath)) {
        const loaderComponentName = `${componentName}Loader`;
        imports.add(
          `import ${loaderComponentName} from '${loadingFilePath
            .replace(pagesDir, "./pages")
            .replace(/\\/g, "/")}';`
        );
        routes.push({
          path: routePath,
          componentName,
          loader: `<Suspense fallback={<${loaderComponentName} />}><${componentName} /></Suspense>`,
        });
      } else {
        routes.push({
          path: routePath,
          componentName,
          loader: `<${componentName} />`,
        });
      }
    }
  }

  return routes;
};

const generateRoutes = (): void => {
  const startTime = performance.now();
  console.log("🚀 Starting route generation...");

  const imports = new Set<string>();
  const routes = walkDir(pagesDir, imports);

  const routesJsx = routes
    .map(
      ({ path, loader }) => `\t\t\t<Route path="${path}" element={${loader}} />`
    )
    .join("\n");

  const content = `
import React, { Suspense } from "react";
import { BrowserRouter as Router, Routes, Route, useLocation } from "react-router-dom";
import { AnimatePresence } from "framer-motion";

${Array.from(imports).join("\n")}

const AnimatedRoutes: React.FC = () => {
  const location = useLocation(); // Acessa a localização atual

  return (
    <AnimatePresence mode="wait" initial={false}>
      <Routes location={location} key={location.pathname}>
${routesJsx}
        <Route path="*" element={<Notfound />} />
      </Routes>
    </AnimatePresence>
  );
};

const AppRoutes: React.FC = () => (
  <Router>
    <Suspense fallback={<div>Loading...</div>}>
      <AnimatedRoutes />
    </Suspense>
  </Router>
);

export default AppRoutes;
`;

  fs.writeFileSync(outputFilePath, content.trim(), "utf-8");

  console.log("\n🛣️  Generated Routes:");
  routes.forEach(({ path }) => {
    const url = `http://localhost:3000${path}`;
    console.log(`- ${path} 👉 ${url}`);
  });

  const endTime = performance.now();
  const timeElapsed = ((endTime - startTime) / 1000).toFixed(2);
  console.log(`\n✅ Routes generated successfully in ${timeElapsed} seconds!`);
};

generateRoutes();
